{"id":"9ee9f4d7cff17e524ae2cd8d9adcacf3","_format":"hh-sol-build-info-1","solcVersion":"0.8.24","solcLongVersion":"0.8.24+commit.e11b9ed9","input":{"language":"Solidity","sources":{"contracts/arrays.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24; //solidity versions\r\n\r\ncontract arrays {\r\n   \r\n   uint256 favoriteNumber;\r\n   // uint256[] listofFavnumbers; //10 , 20 , 30 , 40 ( 0 indexed )\r\n\r\n    struct person{\r\n        uint256 favnumber;\r\n        string name;\r\n    }\r\n   // person public myFriend = person({favnumber: 7, name:\"Vishal\"}); // 1st parameter goes to 7 and second goes to name\r\n\r\n//dynamic array\r\n    person[] public listofPeople ;\r\n// static array\r\n    //person[4] public listofStudents ;\r\n\r\n    mapping (string => uint256) public findFavNumber ;\r\n    mapping (uint256 => string) public findpersonFromNumber ;\r\n   \r\n   function store(uint256 _favnumber)public {\r\n        favoriteNumber = _favnumber;\r\n   }\r\n\r\n   function retrieve() public view returns(uint256){\r\n        return favoriteNumber;\r\n   }\r\n\r\n   function addPerson(string memory _name, uint256 _favoriteNumber) public {\r\n      \r\n       person memory newPerson = person(_favoriteNumber,_name);\r\n       \r\n       listofPeople.push(newPerson);\r\n      \r\n       //mapping through names to get _favorite number\r\n       findFavNumber[_name] = _favoriteNumber;\r\n\r\n       findpersonFromNumber[_favoriteNumber] = _name ;\r\n\r\n       // ALSO VALID\r\n      // listofPeople.push(person(_favoriteNumber,_name));\r\n   }\r\n}"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":true,"mode":"3"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}},"libraries":{}}},"output":{"errors":[],"version":"0.8.24","long_version":"0.8.24+commit.e11b9ed9.Linux.g++","zk_version":"1.4.1","sources":{"contracts/arrays.sol":{"id":0,"ast":{"absolutePath":"contracts/arrays.sol","exportedSymbols":{"arrays":[73]},"id":74,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","0.8",".24"],"nodeType":"PragmaDirective","src":"33:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"arrays","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":73,"linearizedBaseContracts":[73],"name":"arrays","nameLocation":"89:6:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3,"mutability":"mutable","name":"favoriteNumber","nameLocation":"115:14:0","nodeType":"VariableDeclaration","scope":73,"src":"107:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2,"name":"uint256","nodeType":"ElementaryTypeName","src":"107:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"canonicalName":"arrays.person","id":8,"members":[{"constant":false,"id":5,"mutability":"mutable","name":"favnumber","nameLocation":"239:9:0","nodeType":"VariableDeclaration","scope":8,"src":"231:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4,"name":"uint256","nodeType":"ElementaryTypeName","src":"231:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7,"mutability":"mutable","name":"name","nameLocation":"266:4:0","nodeType":"VariableDeclaration","scope":8,"src":"259:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":6,"name":"string","nodeType":"ElementaryTypeName","src":"259:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"person","nameLocation":"214:6:0","nodeType":"StructDefinition","scope":73,"src":"207:71:0","visibility":"public"},{"constant":false,"functionSelector":"2e5effac","id":12,"mutability":"mutable","name":"listofPeople","nameLocation":"441:12:0","nodeType":"VariableDeclaration","scope":73,"src":"425:28:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_person_$8_storage_$dyn_storage","typeString":"struct arrays.person[]"},"typeName":{"baseType":{"id":10,"nodeType":"UserDefinedTypeName","pathNode":{"id":9,"name":"person","nameLocations":["425:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":8,"src":"425:6:0"},"referencedDeclaration":8,"src":"425:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_person_$8_storage_ptr","typeString":"struct arrays.person"}},"id":11,"nodeType":"ArrayTypeName","src":"425:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_person_$8_storage_$dyn_storage_ptr","typeString":"struct arrays.person[]"}},"visibility":"public"},{"constant":false,"functionSelector":"5d19f424","id":16,"mutability":"mutable","name":"findFavNumber","nameLocation":"556:13:0","nodeType":"VariableDeclaration","scope":73,"src":"521:48:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string => uint256)"},"typeName":{"id":15,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":13,"name":"string","nodeType":"ElementaryTypeName","src":"530:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"nodeType":"Mapping","src":"521:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":14,"name":"uint256","nodeType":"ElementaryTypeName","src":"540:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"397a01f9","id":20,"mutability":"mutable","name":"findpersonFromNumber","nameLocation":"612:20:0","nodeType":"VariableDeclaration","scope":73,"src":"577:55:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"typeName":{"id":19,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":17,"name":"uint256","nodeType":"ElementaryTypeName","src":"586:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"577:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":18,"name":"string","nodeType":"ElementaryTypeName","src":"597:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"visibility":"public"},{"body":{"id":29,"nodeType":"Block","src":"685:45:0","statements":[{"expression":{"id":27,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":25,"name":"favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"696:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":26,"name":"_favnumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"713:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"696:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":28,"nodeType":"ExpressionStatement","src":"696:27:0"}]},"functionSelector":"6057361d","id":30,"implemented":true,"kind":"function","modifiers":[],"name":"store","nameLocation":"653:5:0","nodeType":"FunctionDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":22,"mutability":"mutable","name":"_favnumber","nameLocation":"667:10:0","nodeType":"VariableDeclaration","scope":30,"src":"659:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":21,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"658:20:0"},"returnParameters":{"id":24,"nodeType":"ParameterList","parameters":[],"src":"685:0:0"},"scope":73,"src":"644:86:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":37,"nodeType":"Block","src":"785:39:0","statements":[{"expression":{"id":35,"name":"favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"803:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":34,"id":36,"nodeType":"Return","src":"796:21:0"}]},"functionSelector":"2e64cec1","id":38,"implemented":true,"kind":"function","modifiers":[],"name":"retrieve","nameLocation":"746:8:0","nodeType":"FunctionDefinition","parameters":{"id":31,"nodeType":"ParameterList","parameters":[],"src":"754:2:0"},"returnParameters":{"id":34,"nodeType":"ParameterList","parameters":[{"constant":false,"id":33,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":38,"src":"777:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":32,"name":"uint256","nodeType":"ElementaryTypeName","src":"777:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"776:9:0"},"scope":73,"src":"737:87:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":71,"nodeType":"Block","src":"903:381:0","statements":[{"assignments":[47],"declarations":[{"constant":false,"id":47,"mutability":"mutable","name":"newPerson","nameLocation":"935:9:0","nodeType":"VariableDeclaration","scope":71,"src":"921:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_person_$8_memory_ptr","typeString":"struct arrays.person"},"typeName":{"id":46,"nodeType":"UserDefinedTypeName","pathNode":{"id":45,"name":"person","nameLocations":["921:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":8,"src":"921:6:0"},"referencedDeclaration":8,"src":"921:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_person_$8_storage_ptr","typeString":"struct arrays.person"}},"visibility":"internal"}],"id":52,"initialValue":{"arguments":[{"id":49,"name":"_favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"954:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":50,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"970:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":48,"name":"person","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"947:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_person_$8_storage_ptr_$","typeString":"type(struct arrays.person storage pointer)"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"947:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_person_$8_memory_ptr","typeString":"struct arrays.person memory"}},"nodeType":"VariableDeclarationStatement","src":"921:55:0"},{"expression":{"arguments":[{"id":56,"name":"newPerson","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"1013:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_person_$8_memory_ptr","typeString":"struct arrays.person memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_person_$8_memory_ptr","typeString":"struct arrays.person memory"}],"expression":{"id":53,"name":"listofPeople","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12,"src":"995:12:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_person_$8_storage_$dyn_storage","typeString":"struct arrays.person storage ref[] storage ref"}},"id":55,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1008:4:0","memberName":"push","nodeType":"MemberAccess","src":"995:17:0","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_person_$8_storage_$dyn_storage_ptr_$_t_struct$_person_$8_storage_$returns$__$attached_to$_t_array$_t_struct$_person_$8_storage_$dyn_storage_ptr_$","typeString":"function (struct arrays.person storage ref[] storage pointer,struct arrays.person storage ref)"}},"id":57,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"995:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":58,"nodeType":"ExpressionStatement","src":"995:28:0"},{"expression":{"id":63,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":59,"name":"findFavNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"1097:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string memory => uint256)"}},"id":61,"indexExpression":{"id":60,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1111:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1097:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":62,"name":"_favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"1120:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1097:38:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":64,"nodeType":"ExpressionStatement","src":"1097:38:0"},{"expression":{"id":69,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":65,"name":"findpersonFromNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20,"src":"1147:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":67,"indexExpression":{"id":66,"name":"_favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"1168:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1147:37:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":68,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1187:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1147:45:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":70,"nodeType":"ExpressionStatement","src":"1147:45:0"}]},"functionSelector":"6f760f41","id":72,"implemented":true,"kind":"function","modifiers":[],"name":"addPerson","nameLocation":"840:9:0","nodeType":"FunctionDefinition","parameters":{"id":43,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40,"mutability":"mutable","name":"_name","nameLocation":"864:5:0","nodeType":"VariableDeclaration","scope":72,"src":"850:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":39,"name":"string","nodeType":"ElementaryTypeName","src":"850:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":42,"mutability":"mutable","name":"_favoriteNumber","nameLocation":"879:15:0","nodeType":"VariableDeclaration","scope":72,"src":"871:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":41,"name":"uint256","nodeType":"ElementaryTypeName","src":"871:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"849:46:0"},"returnParameters":{"id":44,"nodeType":"ParameterList","parameters":[],"src":"903:0:0"},"scope":73,"src":"831:453:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":74,"src":"80:1207:0","usedErrors":[],"usedEvents":[]}],"src":"33:1254:0"}}},"contracts":{"contracts/arrays.sol":{"arrays":{"abi":[{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"uint256","name":"_favoriteNumber","type":"uint256"}],"name":"addPerson","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"findFavNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"findpersonFromNumber","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"listofPeople","outputs":[{"internalType":"uint256","name":"favnumber","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"retrieve","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_favnumber","type":"uint256"}],"name":"store","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_favoriteNumber\",\"type\":\"uint256\"}],\"name\":\"addPerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"findFavNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"findpersonFromNumber\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listofPeople\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"favnumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_favnumber\",\"type\":\"uint256\"}],\"name\":\"store\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/arrays.sol\":\"arrays\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/arrays.sol\":{\"keccak256\":\"0xe9fb5cc2465f323e4e52724765ba6bea37e12f3307bc0831b65a6a75cb215d06\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://76be0f529b28ec6e6116b63039b4b3cdf43b85ff705973e6453d54694573b554\",\"dweb:/ipfs/QmYZur1jm2k8yW5BiPYzxFr9k9rA74hUmgiAw1QzX2BmG3\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"arrays.sol:arrays\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[8]\n\tadd\tr2, r0, r3\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, r2\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r2, r3\n\tjump.lt\t@.BB0_2\n\tld\tr1, r3\n\tshr.s\t224, r3, r3\n\tsub.s!\t@CPI0_2[0], r3, r5\n\tjump.gt\t@.BB0_9\n\tsub.s!\t@CPI0_6[0], r3, r4\n\tjump.eq\t@.BB0_12\n\tsub.s!\t@CPI0_7[0], r3, r4\n\tjump.eq\t@.BB0_16\n\tsub.s!\t@CPI0_8[0], r3, r3\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r2\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tst.1\t0, r1\n\tadd\t3, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tnear_call\tr0, @copy_array_from_storage_to_memory_string, @DEFAULT_UNWIND\n\tadd\t32, r0, r2\n\tld.1\t64, r3\n\tadd\tr3, r0, stack-[8]\n\tst.1.inc\tr3, r2, r2\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r4\n\tjump\t@.BB0_21\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_9:\n\tsub.s!\t@CPI0_3[0], r3, r5\n\tjump.eq\t@.BB0_22\n\tsub.s!\t@CPI0_4[0], r3, r5\n\tjump.eq\t@.BB0_26\n\tsub.s!\t@CPI0_5[0], r3, r3\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr3\n\tsub.s!\t68, r2, r5\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r3\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r3\n\tld\tr3, r5\n\tsub.s!\t@CPI0_9[0], r5, r3\n\tjump.gt\t@.BB0_2\n\tadd\t35, r5, r3\n\tsub!\tr3, r2, r3\n\tjump.ge\t@.BB0_2\n\tadd\t4, r5, r6\n\tptr.add\tr1, r6, r3\n\tld\tr3, r3\n\tsub.s!\t@CPI0_10[0], r3, r7\n\tjump.ge\t@.BB0_34\n\tadd\t31, r3, r7\n\tsub.s\t32, r0, r10\n\tand\tr7, r10, r7\n\tadd\t63, r7, r7\n\tand\tr7, r10, r7\n\tsub.s!\t@CPI0_11[0], r7, r8\n\tjump.gt\t@.BB0_34\n\tadd\t128, r7, r7\n\tst.1\t64, r7\n\tst.1\t128, r3\n\tadd\tr5, r3, r5\n\tadd\t36, r5, r5\n\tsub!\tr5, r2, r2\n\tjump.gt\t@.BB0_2\n\tadd\t32, r6, r2\n\tptr.add\tr1, r2, r2\n\tand\t31, r3, r5\n\tshr.s!\t5, r3, r6\n\tjump.eq\t@.BB0_90\n\tadd\tr0, r0, r7\n.BB0_40:\n\tshl.s\t5, r7, r8\n\tptr.add\tr2, r8, r9\n\tld\tr9, r9\n\tadd\t160, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_40\n.BB0_90:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_42\n\tshl.s\t5, r6, r6\n\tptr.add\tr2, r6, r2\n\tshl.s\t3, r5, r5\n\tadd\t160, r6, r6\n\tld.1\tr6, r7\n\tshl\tr7, r5, r7\n\tshr\tr7, r5, r7\n\tld\tr2, r2\n\tsub\t256, r5, r5\n\tshr\tr2, r5, r2\n\tshl\tr2, r5, r2\n\tor\tr2, r7, r2\n\tst.1\tr6, r2\n.BB0_42:\n\tadd\t160, r3, r2\n\tst.1\tr2, r0\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r6\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_12[0], r1, r2\n\tjump.gt\t@.BB0_34\n\tadd\t64, r1, r2\n\tst.1\t64, r2\n\tst.1.inc\tr1, r6, r2\n\tst.1\tr2, r4\n\tadd\t1, r0, r5\n\tsload\tr5, r3\n\tsub.s!\t@CPI0_9[0], r3, r4\n\tjump.gt\t@.BB0_34\n\tadd\t1, r3, r4\n\tsstore\tr5, r4\n\tst.1\t0, r5\n\tld.1\tr1, r1\n\tshl.s\t1, r3, r3\n\tadd\t@CPI0_13[0], r3, r4\n\tsstore\tr4, r1\n\tadd\t@CPI0_14[0], r3, r3\n\tld.1\tr2, r7\n\tld.1.inc\tr7, r4, r8\n\tsub.s!\t@CPI0_9[0], r4, r1\n\tjump.le\t@.BB0_45\n.BB0_34:\n\tadd\t@CPI0_18[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_19[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_12:\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r2\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tadd\t1, r0, r2\n\tsload\tr2, r2\n\tsub!\tr1, r2, r2\n\tjump.ge\t@.BB0_2\n\tnear_call\tr0, @storage_array_index_access_struct_person__dyn, @DEFAULT_UNWIND\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[8]\n\tadd\t1, r1, r1\n\tnear_call\tr0, @copy_array_from_storage_to_memory_string, @DEFAULT_UNWIND\n\tadd\t64, r0, r2\n\tld.1\t64, r4\n\tadd\tr4, r0, stack-[7]\n\tadd\t32, r4, r3\n\tst.1\tr3, r2\n\tadd\tstack-[8], r0, r2\n\tst.1\tr4, r2\n\tadd\t64, r4, r2\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r4\n.BB0_21:\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_16:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_21[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_22:\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r3\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_9[0], r1, r3\n\tjump.gt\t@.BB0_2\n\tadd\t4, r1, r1\n\tnear_call\tr0, @abi_decode_string, @DEFAULT_UNWIND\n\tld.1.inc\tr1, r3, r1\n\tadd\tr3, r0, stack-[7]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[8]\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r3\n\tadd\tstack-[8], r0, r1\n\tadd\tr3, r1, r4\n\tadd\t2, r0, r2\n\tst.1\tr4, r2\n\tadd\t32, r3, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_20[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_26:\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r2\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsstore\tr0, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_45:\n\tsload\tr3, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r1\n\tand\t127, r1, r9\n\tadd.ne\tr1, r0, r9\n\tsub.s!\t31, r9, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tsub!\tr2, r1, r1\n\tjump.eq\t@.BB0_47\n.BB0_46:\n\tadd\t@CPI0_18[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_19[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_47:\n\tadd\tr8, r0, stack-[3]\n\tadd\tr7, r0, stack-[2]\n\tadd\tr4, r0, stack-[8]\n\tadd\tr3, r0, stack-[7]\n\tadd\tr6, r0, stack-[5]\n\tadd\tr5, r0, stack-[1]\n\tadd\tr10, r0, stack-[6]\n\tadd\tr9, r0, stack-[4]\n\tsub.s!\t32, r9, r1\n\tjump.lt\t@.BB0_51\n\tadd\tstack-[7], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_15[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[8], r0, r3\n\tadd\t31, r3, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r3, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[4], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.ge\t@.BB0_51\n.BB0_52:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_52\n.BB0_51:\n\tadd\tstack-[8], r0, r1\n\tsub.s!\t31, r1, r1\n\tjump.le\t@.BB0_67\n\tadd\tstack-[7], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_15[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[6], r0, r2\n\tjump.eq\t@.BB0_2\n\tand!\tstack-[8], r2, r3\n\tld\tr1, r1\n\tjump.ne\t@.BB0_62\n\tadd\t32, r0, r2\n\tjump\t@.BB0_64\n.BB0_67:\n\tsub!\tstack-[8], r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_69\n\tadd\tstack-[3], r0, r1\n\tld.1\tr1, r1\n.BB0_69:\n\tadd\tstack-[8], r0, r4\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r4, r2\n\tor\tr1, r2, r1\n\tjump\t@.BB0_53\n.BB0_62:\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n\tadd\tstack-[2], r0, r6\n.BB0_63:\n\tadd\tr2, r6, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_63\n.BB0_64:\n\tsub.s!\tstack-[8], r3, r3\n\tjump.ge\t@.BB0_66\n\tadd\tstack-[8], r0, r3\n\tshl.s\t3, r3, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tstack-[2], r2, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_66:\n\tadd\tstack-[8], r0, r1\n\tshl.s\t1, r1, r1\n\tor\t1, r1, r1\n.BB0_53:\n\tadd\tstack-[7], r0, r2\n\tsstore\tr2, r1\n\tld.1\t64, r2\n\tld.1\t128, r1\n\tsub!\tr1, r0, r3\n\tjump.eq\t@.BB0_56\n\tadd\tr0, r0, r3\n.BB0_55:\n\tadd\tr3, r2, r4\n\tadd\t160, r3, r5\n\tld.1\tr5, r5\n\tst.1\tr4, r5\n\tadd\t32, r3, r3\n\tsub!\tr3, r1, r4\n\tjump.lt\t@.BB0_55\n.BB0_56:\n\tadd\tr1, r2, r3\n\tadd\t2, r0, r4\n\tst.1\tr3, r4\n\tadd\t@CPI0_0[0], r0, r4\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr4, r0, r2\n\tshl.s\t64, r2, r2\n\tadd\t32, r1, r1\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr4, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_16[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[5], r0, r2\n\tsstore\tr1, r2\n\tst.1\t0, r2\n\tadd\t3, r0, r1\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_17[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[8]\n\tld.1\t128, r1\n\tadd\tr1, r0, stack-[7]\n\tsub.s!\t@CPI0_9[0], r1, r1\n\tjump.gt\t@.BB0_34\n\tadd\tstack-[8], r0, r1\n\tsload\tr1, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r3\n\tadd.ne\tr2, r0, r3\n\tadd\tr3, r0, stack-[5]\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_46\n\tadd\tstack-[5], r0, r1\n\tsub.s!\t32, r1, r1\n\tjump.lt\t@.BB0_75\n\tadd\tstack-[8], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_15[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[7], r0, r3\n\tadd\t31, r3, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r3, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[5], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.ge\t@.BB0_75\n.BB0_76:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_76\n.BB0_75:\n\tadd\tstack-[7], r0, r1\n\tsub.s!\t31, r1, r1\n\tjump.le\t@.BB0_87\n\tadd\tstack-[8], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_15[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[6], r0, r2\n\tjump.eq\t@.BB0_2\n\tand!\tstack-[7], r2, r2\n\tld\tr1, r1\n\tjump.ne\t@.BB0_81\n\tadd\t160, r0, r3\n\tjump\t@.BB0_84\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_87:\n\tsub!\tstack-[7], r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_89\n\tld.1\t160, r1\n.BB0_89:\n\tadd\tstack-[7], r0, r4\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r4, stack-[1]\n\tjump\t@.BB0_77\n.BB0_81:\n\tadd\t32, r0, r4\n\tadd\tr0, r0, r3\n.BB0_82:\n\tadd\tr4, r0, r5\n\tadd\t128, r5, r4\n\tld.1\tr4, r4\n\tsstore\tr1, r4\n\tadd\t32, r5, r4\n\tadd\t1, r1, r1\n\tadd\t32, r3, r3\n\tsub!\tr3, r2, r6\n\tjump.lt\t@.BB0_82\n\tadd\t160, r5, r3\n.BB0_84:\n\tsub.s!\tstack-[7], r2, r2\n\tjump.ge\t@.BB0_86\n\tadd\tstack-[7], r0, r2\n\tshl.s\t3, r2, r2\n\tand\t248, r2, r2\n\tsub.s\t1, r0, r4\n\tshr\tr4, r2, r2\n\txor\tr2, r4, r2\n\tld.1\tr3, r3\n\tand\tr3, r2, r2\n\tsstore\tr1, r2\n.BB0_86:\n\tadd\tstack-[7], r0, r1\n\tshl.s\t1, r1, r1\n.BB0_77:\n\tor\tstack-[1], r1, r1\n\tadd\tstack-[8], r0, r2\n\tsstore\tr2, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\nstorage_array_index_access_struct_person__dyn:\n.func_begin1:\n\tadd\t1, r0, r2\n\tsload\tr2, r3\n\tsub!\tr3, r1, r3\n\tjump.le\t@.BB1_1\n\tst.1\t0, r2\n\tshl.s\t1, r1, r1\n\tadd\t@CPI1_2[0], r1, r1\n\tret\n.BB1_1:\n\tadd\t@CPI1_0[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_1[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\ncopy_array_from_storage_to_memory_string:\n.func_begin2:\n\tnop\tstack+=[3]\n\tsload\tr1, r2\n\tand!\t1, r2, r3\n\tshr.s\t1, r2, r4\n\tand\t127, r4, r6\n\tadd.ne\tr4, r0, r6\n\tsub.s!\t31, r6, r4\n\tadd\t0, r0, r4\n\tadd.gt\t1, r0, r4\n\tsub!\tr3, r4, r4\n\tjump.ne\t@.BB2_1\n\tld.1\t64, r5\n\tst.1.inc\tr5, r6, r4\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB2_8\n\tadd\tr4, r0, stack-[1]\n\tadd\tr6, r0, stack-[3]\n\tadd\tr5, r0, stack-[2]\n\tst.1\t0, r1\n\tadd\t@CPI2_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI2_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI2_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB2_10\n\tadd\tstack-[3], r0, r6\n\tsub!\tr6, r0, r2\n\tjump.eq\t@.BB2_12\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[2], r0, r5\n\tadd\tstack-[1], r0, r7\n.BB2_14:\n\tadd\tr7, r1, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r6, r3\n\tjump.lt\t@.BB2_14\n\tjump\t@.BB2_4\n.BB2_8:\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\tr4, r1\n\tsub!\tr6, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB2_4\n.BB2_12:\n\tadd\tr0, r0, r1\n\tadd\tstack-[2], r0, r5\n.BB2_4:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r5, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI2_2[0], r1, r3\n\tjump.gt\t@.BB2_6\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB2_6\n\tst.1\t64, r1\n\tadd\tr5, r0, r1\n\tret\n.BB2_1:\n\tadd\t@CPI2_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI2_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB2_6:\n\tadd\t@CPI2_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI2_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB2_10:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\ncopy_memory_to_memory_with_cleanup:\n.func_begin3:\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB3_3\n\tadd\tr0, r0, r4\n.BB3_2:\n\tadd\tr4, r2, r5\n\tadd\tr4, r1, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB3_2\n.BB3_3:\n\tadd\tr3, r2, r1\n\tst.1\tr1, r0\n\tret\n.func_end3:\n\nabi_encode_string:\n.func_begin4:\n\tld.1.inc\tr1, r3, r4\n\tst.1.inc\tr2, r3, r1\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB4_3\n\tadd\tr0, r0, r2\n.BB4_2:\n\tadd\tr2, r1, r5\n\tadd\tr4, r2, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r2, r2\n\tsub!\tr2, r3, r5\n\tjump.lt\t@.BB4_2\n.BB4_3:\n\tadd\tr3, r1, r2\n\tst.1\tr2, r0\n\tadd\t31, r3, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr1, r2, r1\n\tret\n.func_end4:\n\nabi_decode_string:\n.func_begin5:\n\tadd\tr1, r0, r3\n\tadd\t31, r3, r1\n\tadd\t@CPI5_0[0], r0, r4\n\tsub!\tr1, r2, r5\n\tadd\tr0, r0, r5\n\tadd.lt\tr4, r0, r5\n\tand\t@CPI5_0[0], r2, r6\n\tand\t@CPI5_0[0], r1, r1\n\tsub!\tr1, r6, r7\n\tadd.le\tr0, r0, r4\n\txor\tr1, r6, r1\n\tsub.s!\t@CPI5_0[0], r1, r1\n\tadd.ne\tr5, r0, r4\n\tsub!\tr4, r0, r1\n\tjump.eq\t@.BB5_1\n\tptr.add\tstack[@ptr_calldata], r0, r6\n\tptr.add\tr6, r3, r1\n\tld\tr1, r4\n\tsub.s!\t@CPI5_1[0], r4, r1\n\tjump.ge\t@.BB5_3\n\tadd\t31, r4, r1\n\tsub.s\t32, r0, r5\n\tand\tr1, r5, r1\n\tadd\t63, r1, r1\n\tand\tr1, r5, r5\n\tld.1\t64, r1\n\tadd\tr1, r5, r5\n\tsub!\tr5, r1, r7\n\tadd\t0, r0, r7\n\tadd.lt\t1, r0, r7\n\tsub.s!\t@CPI5_2[0], r5, r8\n\tjump.gt\t@.BB5_3\n\tand!\t1, r7, r7\n\tjump.ne\t@.BB5_3\n\tst.1\t64, r5\n\tst.1.inc\tr1, r4, r5\n\tadd\t32, r3, r3\n\tadd\tr3, r4, r7\n\tsub!\tr7, r2, r2\n\tjump.gt\t@.BB5_1\n\tptr.add\tr6, r3, r3\n\tand\t31, r4, r2\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB5_12\n\tadd\tr0, r0, r7\n.BB5_9:\n\tshl.s\t5, r7, r8\n\tadd\tr5, r8, r9\n\tptr.add\tr3, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB5_9\n.BB5_12:\n\tsub!\tr2, r0, r7\n\tjump.eq\t@.BB5_11\n\tshl.s\t5, r6, r6\n\tptr.add\tr3, r6, r3\n\tadd\tr5, r6, r6\n\tshl.s\t3, r2, r2\n\tld.1\tr6, r7\n\tshl\tr7, r2, r7\n\tshr\tr7, r2, r7\n\tld\tr3, r3\n\tsub\t256, r2, r2\n\tshr\tr3, r2, r3\n\tshl\tr3, r2, r2\n\tor\tr2, r7, r2\n\tst.1\tr6, r2\n.BB5_11:\n\tadd\tr5, r4, r2\n\tst.1\tr2, r0\n\tret\n.BB5_3:\n\tadd\t@CPI5_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI5_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB5_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end5:\n\n__sha3:\n.func_begin6:\n\tadd\t@CPI6_0[0], r0, r3\n\tsub.s!\t@CPI6_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tsub.s!\t@CPI6_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI6_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI6_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB6_2\n\tld\tr1, r1\n\tret\n.BB6_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end6:\n\n__staticcall:\n.func_begin7:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB7_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB7_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end7:\n\n\t.data\n\t.p2align\t5, 0x0\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI2_0:\nCPI6_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 1561981987\nCPI0_3:\n\t.cell 1561981988\nCPI0_4:\n\t.cell 1616328221\nCPI0_5:\n\t.cell 1870008129\nCPI0_6:\n\t.cell 777977772\nCPI0_7:\n\t.cell 778358465\nCPI0_8:\n\t.cell 964297209\nCPI0_9:\nCPI2_2:\nCPI5_2:\n\t.cell 18446744073709551615\nCPI0_10:\nCPI5_1:\n\t.cell 18446744073709551616\nCPI0_11:\n\t.cell 18446744073709551487\nCPI0_12:\n\t.cell 18446744073709551551\nCPI0_13:\nCPI1_2:\n\t.cell -35707666377435648211887908874984608119992236509074197713628505308453184860938\nCPI0_14:\n\t.cell -35707666377435648211887908874984608119992236509074197713628505308453184860937\nCPI0_15:\nCPI2_1:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_16:\nCPI6_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\nCPI0_17:\n\t.cell 904625697166532776746648320380374280103671760270919307471179981048634146816\nCPI0_18:\nCPI1_0:\nCPI2_3:\nCPI5_3:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_19:\nCPI1_1:\nCPI2_4:\nCPI5_4:\n\t.cell 2852213850513516153367582212096\nCPI0_20:\n\t.cell 2535301200456458802993406410752\nCPI0_21:\n\t.cell 2535301202817642044428229017600\nCPI5_0:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\n","bytecode":{"object":""},"methodIdentifiers":{"addPerson(string,uint256)":"6f760f41","findFavNumber(string)":"5d19f424","findpersonFromNumber(uint256)":"397a01f9","listofPeople(uint256)":"2e5effac","retrieve()":"2e64cec1","store(uint256)":"6057361d"}},"irOptimized":"/// @use-src 0:\"contracts/arrays.sol\"\nobject \"arrays_73\" {\n    code {\n        {\n            /// @src 0:80:1287  \"contract arrays {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"arrays_73_deployed\")\n            codecopy(_1, dataoffset(\"arrays_73_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"contracts/arrays.sol\"\n    object \"arrays_73_deployed\" {\n        code {\n            {\n                /// @src 0:80:1287  \"contract arrays {...\"\n                let _1 := 64\n                mstore(_1, memoryguard(0x80))\n                let _2 := 4\n                if iszero(lt(calldatasize(), _2))\n                {\n                    let _3 := 0\n                    switch shr(224, calldataload(_3))\n                    case 0x2e5effac {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                        let value := calldataload(_2)\n                        /// @src 0:425:453  \"person[] public listofPeople\"\n                        if iszero(lt(value, /** @src 0:80:1287  \"contract arrays {...\" */ sload(1)))\n                        /// @src 0:425:453  \"person[] public listofPeople\"\n                        {\n                            revert(/** @src 0:80:1287  \"contract arrays {...\" */ _3, _3)\n                        }\n                        /// @src 0:425:453  \"person[] public listofPeople\"\n                        let slot, offset := storage_array_index_access_struct_person__dyn(value)\n                        /// @src 0:80:1287  \"contract arrays {...\"\n                        let _4 := sload(/** @src 0:425:453  \"person[] public listofPeople\" */ slot)\n                        let ret_mpos := copy_array_from_storage_to_memory_string(add(slot, /** @src 0:80:1287  \"contract arrays {...\" */ 1))\n                        let memPos := mload(_1)\n                        mstore(memPos, _4)\n                        mstore(add(memPos, 32), _1)\n                        return(memPos, sub(abi_encode_string(ret_mpos, add(memPos, _1)), memPos))\n                    }\n                    case 0x2e64cec1 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        let _5 := sload(_3)\n                        let memPos_1 := mload(_1)\n                        mstore(memPos_1, _5)\n                        return(memPos_1, 32)\n                    }\n                    case 0x397a01f9 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                        mstore(_3, calldataload(_2))\n                        mstore(32, /** @src 0:577:632  \"mapping (uint256 => string) public findpersonFromNumber\" */ 3)\n                        /// @src 0:80:1287  \"contract arrays {...\"\n                        let value_1 := copy_array_from_storage_to_memory_string(keccak256(_3, _1))\n                        let memPos_2 := mload(_1)\n                        mstore(memPos_2, 32)\n                        return(memPos_2, sub(abi_encode_string(value_1, add(memPos_2, 32)), memPos_2))\n                    }\n                    case 0x5d19f424 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                        let offset_1 := calldataload(_2)\n                        if gt(offset_1, 0xffffffffffffffff) { revert(_3, _3) }\n                        let value0 := abi_decode_string(add(_2, offset_1), calldatasize())\n                        let pos := mload(_1)\n                        let length := mload(value0)\n                        copy_memory_to_memory_with_cleanup(add(value0, 32), pos, length)\n                        let end := add(pos, length)\n                        mstore(end, /** @src 0:521:569  \"mapping (string => uint256) public findFavNumber\" */ 2)\n                        /// @src 0:80:1287  \"contract arrays {...\"\n                        let _6 := sload(keccak256(pos, add(sub(end, pos), 32)))\n                        let memPos_3 := mload(_1)\n                        mstore(memPos_3, _6)\n                        return(memPos_3, 32)\n                    }\n                    case 0x6057361d {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                        sstore(_3, calldataload(_2))\n                        return(_3, _3)\n                    }\n                    case 0x6f760f41 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _1) { revert(_3, _3) }\n                        let offset_2 := calldataload(_2)\n                        let _7 := 0xffffffffffffffff\n                        if gt(offset_2, _7) { revert(_3, _3) }\n                        let value0_1 := abi_decode_string(add(_2, offset_2), calldatasize())\n                        let value_2 := calldataload(36)\n                        let memPtr := mload(_1)\n                        let newFreePtr := add(memPtr, _1)\n                        if or(gt(newFreePtr, _7), lt(newFreePtr, memPtr))\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, 36)\n                        }\n                        mstore(_1, newFreePtr)\n                        mstore(memPtr, value_2)\n                        let _8 := 32\n                        /// @src 0:947:976  \"person(_favoriteNumber,_name)\"\n                        let _9 := add(memPtr, /** @src 0:80:1287  \"contract arrays {...\" */ _8)\n                        mstore(_9, value0_1)\n                        let _10 := 1\n                        let oldLen := sload(_10)\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, 36)\n                        }\n                        sstore(_10, add(oldLen, _10))\n                        let slot_1, offset_3 := storage_array_index_access_struct_person__dyn(oldLen)\n                        if offset_3\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, _3)\n                            revert(_3, 36)\n                        }\n                        sstore(slot_1, mload(memPtr))\n                        let memberSlot := add(slot_1, _10)\n                        let _11 := mload(_9)\n                        let newLen := mload(_11)\n                        if gt(newLen, _7)\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, 36)\n                        }\n                        let _12 := extract_byte_array_length(sload(memberSlot))\n                        let _13 := 31\n                        if gt(_12, _13)\n                        {\n                            mstore(_3, memberSlot)\n                            let data := keccak256(_3, _8)\n                            let deleteStart := add(data, shr(5, add(newLen, _13)))\n                            if lt(newLen, _8) { deleteStart := data }\n                            let _14 := add(data, shr(5, add(_12, _13)))\n                            let start := deleteStart\n                            for { } lt(start, _14) { start := add(start, _10) }\n                            { sstore(start, _3) }\n                        }\n                        let srcOffset := _3\n                        srcOffset := _8\n                        switch gt(newLen, _13)\n                        case 1 {\n                            let loopEnd := and(newLen, not(31))\n                            mstore(_3, memberSlot)\n                            let dstPtr := keccak256(_3, _8)\n                            let i := _3\n                            for { } lt(i, loopEnd) { i := add(i, _8) }\n                            {\n                                sstore(dstPtr, mload(add(_11, srcOffset)))\n                                dstPtr := add(dstPtr, _10)\n                                srcOffset := add(srcOffset, _8)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(_11, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(memberSlot, add(shl(_10, newLen), _10))\n                        }\n                        default {\n                            let value_3 := _3\n                            if newLen\n                            {\n                                value_3 := mload(add(_11, srcOffset))\n                            }\n                            sstore(memberSlot, or(and(value_3, not(shr(shl(3, newLen), not(0)))), shl(_10, newLen)))\n                        }\n                        let pos_1 := mload(_1)\n                        let length_1 := mload(value0_1)\n                        copy_memory_to_memory_with_cleanup(add(value0_1, _8), pos_1, length_1)\n                        let end_1 := add(pos_1, length_1)\n                        mstore(end_1, /** @src 0:1097:1110  \"findFavNumber\" */ 0x02)\n                        /// @src 0:80:1287  \"contract arrays {...\"\n                        sstore(keccak256(pos_1, add(sub(end_1, pos_1), _8)), value_2)\n                        mstore(_3, value_2)\n                        mstore(_8, /** @src 0:1147:1167  \"findpersonFromNumber\" */ 0x03)\n                        /// @src 0:80:1287  \"contract arrays {...\"\n                        let dataSlot := keccak256(_3, _1)\n                        let newLen_1 := mload(value0_1)\n                        if gt(newLen_1, _7)\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, 36)\n                        }\n                        let _15 := extract_byte_array_length(sload(dataSlot))\n                        if gt(_15, _13)\n                        {\n                            mstore(_3, dataSlot)\n                            let data_1 := keccak256(_3, _8)\n                            let deleteStart_1 := add(data_1, shr(5, add(newLen_1, _13)))\n                            if lt(newLen_1, _8) { deleteStart_1 := data_1 }\n                            let _16 := add(data_1, shr(5, add(_15, _13)))\n                            let start_1 := deleteStart_1\n                            for { } lt(start_1, _16) { start_1 := add(start_1, _10) }\n                            { sstore(start_1, _3) }\n                        }\n                        let srcOffset_1 := _3\n                        srcOffset_1 := _8\n                        switch gt(newLen_1, _13)\n                        case 1 {\n                            let loopEnd_1 := and(newLen_1, not(31))\n                            mstore(_3, dataSlot)\n                            let dstPtr_1 := keccak256(_3, _8)\n                            let i_1 := _3\n                            for { } lt(i_1, loopEnd_1) { i_1 := add(i_1, _8) }\n                            {\n                                sstore(dstPtr_1, mload(add(value0_1, srcOffset_1)))\n                                dstPtr_1 := add(dstPtr_1, _10)\n                                srcOffset_1 := add(srcOffset_1, _8)\n                            }\n                            if lt(loopEnd_1, newLen_1)\n                            {\n                                let lastValue_1 := mload(add(value0_1, srcOffset_1))\n                                sstore(dstPtr_1, and(lastValue_1, not(shr(and(shl(/** @src 0:1147:1167  \"findpersonFromNumber\" */ 0x03, /** @src 0:80:1287  \"contract arrays {...\" */ newLen_1), 248), not(0)))))\n                            }\n                            sstore(dataSlot, add(shl(_10, newLen_1), _10))\n                        }\n                        default {\n                            let value_4 := _3\n                            if newLen_1\n                            {\n                                value_4 := mload(add(value0_1, srcOffset_1))\n                            }\n                            sstore(dataSlot, or(and(value_4, not(shr(shl(/** @src 0:1147:1167  \"findpersonFromNumber\" */ 0x03, /** @src 0:80:1287  \"contract arrays {...\" */ newLen_1), not(0)))), shl(_10, newLen_1)))\n                        }\n                        return(_3, _3)\n                    }\n                }\n                revert(0, 0)\n            }\n            function storage_array_index_access_struct_person__dyn(index) -> slot, offset\n            {\n                if iszero(lt(index, sload(/** @src 0:425:453  \"person[] public listofPeople\" */ 1)))\n                /// @src 0:80:1287  \"contract arrays {...\"\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:425:453  \"person[] public listofPeople\" */ 1)\n                /// @src 0:80:1287  \"contract arrays {...\"\n                slot := add(80084422859880547211683076133703299733277748156566366325829078699459944778998, shl(/** @src 0:425:453  \"person[] public listofPeople\" */ 1, /** @src 0:80:1287  \"contract arrays {...\" */ index))\n                offset := /** @src -1:-1:-1 */ 0\n            }\n            /// @src 0:80:1287  \"contract arrays {...\"\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function copy_array_from_storage_to_memory_string(slot) -> memPtr\n            {\n                memPtr := mload(64)\n                let ret := /** @src -1:-1:-1 */ 0\n                /// @src 0:80:1287  \"contract arrays {...\"\n                let slotValue := sload(slot)\n                let length := extract_byte_array_length(slotValue)\n                mstore(memPtr, length)\n                let _1 := 0x20\n                let _2 := 1\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(add(memPtr, _1), and(slotValue, not(255)))\n                    ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _1)\n                }\n                case 1 {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:80:1287  \"contract arrays {...\" */ slot)\n                    let dataPos := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:80:1287  \"contract arrays {...\" */ _1)\n                    let i := /** @src -1:-1:-1 */ 0\n                    /// @src 0:80:1287  \"contract arrays {...\"\n                    for { } lt(i, length) { i := add(i, _1) }\n                    {\n                        mstore(add(add(memPtr, i), _1), sload(dataPos))\n                        dataPos := add(dataPos, _2)\n                    }\n                    ret := add(add(memPtr, i), _1)\n                }\n                finalize_allocation(memPtr, sub(ret, memPtr))\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                let i := 0\n                for { } lt(i, length) { i := add(i, 32) }\n                {\n                    mstore(add(dst, i), mload(add(src, i)))\n                }\n                mstore(add(dst, length), 0)\n            }\n            function abi_encode_string(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n                end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n            }\n            function abi_decode_string(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                let _1 := calldataload(offset)\n                if gt(_1, 0xffffffffffffffff)\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:80:1287  \"contract arrays {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:80:1287  \"contract arrays {...\" */ 0x24)\n                }\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, add(and(add(_1, 0x1f), not(31)), 0x20))\n                mstore(memPtr, _1)\n                if gt(add(add(offset, _1), 0x20), end)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:80:1287  \"contract arrays {...\"\n                calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n                mstore(add(add(memPtr, _1), 0x20), /** @src -1:-1:-1 */ 0)\n                /// @src 0:80:1287  \"contract arrays {...\"\n                array := memPtr\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122040783dd4b414c44b2cedf93fe022fb7be109b5bf345ed8bfff4bc68c58893e4b64736f6c63430008180033\"\n    }\n}\n","hash":"010000d50c93323d849d6c080a3992fe2a9224e88e945a6152133ffae2b94971","factoryDependencies":{}}}}}}